#!/bin/bash

set -e

#KUBERNETES_VERSION=v1.12.1
#CNI_PLUGINS_VERSION=v0.7.4
#CRICTL_VERSION=v1.12.0
#CALICO_VERSION=v3.1.3

USAGE=$(cat <<EOF
Usage: kube-tools install <Target> <Args>

Targets
    master <Version> <Calico Version>
    worker <Version> <Calico Version>
    kubeadm <Version>
    kubelet <Version>
    kubectl <Version>
    crictl <Version>
    calicoctl <Version>
    cni-plugins <Version>
    images-master <Version> <Calico Version>
    images-worker <Version> <Calico Version>
    template <Name>
EOF
)

function main {
    local START_TIME; START_TIME="$(start_time)"

    case "$1 $2" in
        "install master"|\
        "install worker"|\
        "install images-master"|\
        "install images-worker")
            local TARGET="$2"; local VERSION="$3"; local CALICO_VERSION="$4"

            if [ -z "${VERSION}" ] || [ -z "${CALICO_VERSION}" ]; then usage; fi
            install_"${TARGET//-/_}" "${VERSION}" "${CALICO_VERSION}"
        ;;
        "install kubeadm"|\
        "install kubelet"|\
        "install kubectl"|\
        "install crictl"|\
        "install calicoctl"|\
        "install cni-plugins")
            local TARGET="$2"; local VERSION="$3"

            if [ -z "${VERSION}" ]; then usage; fi
            install_"${TARGET//-/_}" "${VERSION}"
        ;;
        "install template")
            local TARGET="$2"; local NAME="$3"

            if [ -z "${NAME}" ]; then usage; fi
            install_"${TARGET//-/_}" "$("${NAME//-/_}"_template)"
        ;;
        *) usage ;;
    esac

    show_completion_time "${START_TIME}"
}

function templates {
    echo "/etc/kubernetes/templates"
}

function kube_tools_binaries {
    local VERSION="$1"
    printf %b "https://storage.googleapis.com/kubernetes-release/release/" \
              "${VERSION}/bin/linux/amd64"
}
function kube_tools_configs {
    local VERSION="$1"
    printf %b "https://raw.githubusercontent.com/kubernetes/kubernetes/" \
              "${VERSION}/build/debs"
}
function crictl_archive {
    local VERSION="$1"
    printf %b "https://github.com/kubernetes-incubator/cri-tools/" \
              "releases/download/${VERSION}/" \
              "crictl-${VERSION}-linux-amd64.tar.gz"
}
function calicoctl_binary {
    local VERSION="$1"
    printf %b "https://github.com/projectcalico/calicoctl/" \
              "releases/download/${VERSION}/calicoctl"
}
function cni_plugins_archive {
    local VERSION="$1"
    printf %b "https://github.com/containernetworking/plugins/" \
              "releases/download/${VERSION}/" \
              "cni-plugins-amd64-${VERSION}.tgz"
}
function kubeadm_template {
    echo "https://s3.eu-central-1.amazonaws.com/cennsonic/manifests/kubeadm.yaml"
}
function calico_template {
    echo "https://s3.eu-central-1.amazonaws.com/cennsonic/manifests/calico.yaml"
    echo "https://s3.eu-central-1.amazonaws.com/cennsonic/manifests/calico-rbac-kdd.yaml"
}
function multus_cni_template {
    echo "https://s3.eu-central-1.amazonaws.com/cennsonic/manifests/multus-cni.yaml"
    echo "https://s3.eu-central-1.amazonaws.com/cennsonic/manifests/multus-cni-rbac.yaml"
}
function kubealived_template {
    local VERSION="$1"
    printf %b "kubealived.yaml=" \
              "https://raw.githubusercontent.com/openvnf/kubealived/"\
              "${VERSION}/bundle.yaml"
}
function user_admin_crb_template {
    echo "https://s3.eu-central-1.amazonaws.com/cennsonic/manifests/user-admin-crb.yaml"
}
function master_images {
    local VERSION="$1"
    local CALICO_VERSION="$2"
    local KUBEALIVED_VERSION="1.0.0"

    /opt/bin/kubeadm config images list \
        --kubernetes-version "${VERSION}"

    echo "quay.io/calico/node:${CALICO_VERSION}"
    echo "quay.io/calico/cni:${CALICO_VERSION}"
    echo "quay.io/openvnf/kubealived:${KUBEALIVED_VERSION}"
}
function worker_images {
    local VERSION="$1"
    local CALICO_VERSION="$2"
    local CNI_NODE_VERSION="0.3.0"

    /opt/bin/kubeadm config images list \
        --kubernetes-version "${VERSION}" | grep "kube-proxy\\|pause"

    echo "quay.io/calico/node:${CALICO_VERSION}"
    echo "quay.io/openvnf/cni-node:${CNI_NODE_VERSION}"
}

function install_master {
    local VERSION="$1"
    local CALICO_VERSION="$2"
    local KUBEALIVED_VERSION="1.0.0"

    install_kubeadm "${VERSION}"
    install_kubelet "${VERSION}"
    install_kubectl "${VERSION}"
    install_images master "${VERSION}" "${CALICO_VERSION}"
    install_template "$(kubeadm_template)" \
                     "$(calico_template)" \
                     "$(multus_cni_template)" \
                     "$(kubealived_template "${KUBEALIVED_VERSION}")" \
                     "$(user_admin_crb_template)"

    enable_service docker kubelet
}
function install_worker {
    local VERSION="$1"
    local CALICO_VERSION="$2"

    install_kubeadm "${VERSION}"
    install_kubelet "${VERSION}"
    install_images worker "${VERSION}" "${CALICO_VERSION}"

    enable_service docker kubelet
}

function install_kubeadm {
    local VERSION="$1"

    log "Installing kubeadm ${VERSION}..."
    install_binary "$(kube_tools_binaries "${VERSION}")/kubeadm"
    install_config "$(kube_tools_configs "${VERSION}")/10-kubeadm.conf" \
                    /etc/systemd/system/kubelet.service.d 644
}
function install_kubelet {
    local VERSION="$1"

    log "Installing kubelet ${VERSION}..."
    install_binary "$(kube_tools_binaries "${VERSION}")/kubelet"
    install_config "$(kube_tools_configs "${VERSION}")/kubelet.service" \
                    /etc/systemd/system 444
}
function install_kubectl {
    local VERSION="$1"

    log "Installing kubectl ${VERSION}..."
    install_binary "$(kube_tools_binaries "${VERSION}")/kubectl"
}
function install_crictl {
    local VERSION="$1"

    log "Installing crictl ${VERSION}..."
    install_binary_archive "$(crictl_archive "${VERSION}")"
}
function install_calicoctl {
    local VERSION="$1"

    log "Installing calicoctl ${VERSION}..."
    install_binary "$(calicoctl_binary "${VERSION}")"
}
function install_cni_plugins {
    local VERSION="$1"

    log "Installing CNI plugins ${VERSION}..."
    install_binary_archive "$(cni_plugins_archive "${VERSION}")" /opt/cni/bin
}
function install_images_master {
    install_images master "$@"
}
function install_images_worker {
    install_images worker "$@"
}
function install_images {
    local NODE="$1"
    local VERSION="$2"
    local CALICO_VERSION="$3"

    log "Pulling ${NODE} images..."
    for IMAGE in $("${NODE}_images" "${VERSION}" "${CALICO_VERSION}"); do
        docker pull "${IMAGE}"
    done
}

function install_binary {
    local URL="$1"
    local DEST="${2:-/opt/bin}"
    local BINARY; BINARY=$(basename "${URL}")

    curl -LO "${URL}"
    sudo mkdir -p "${DEST}"
    sudo install "${BINARY}" "${DEST}" && rm "${BINARY}"
}
function install_binary_archive {
    local URL="$1"
    local DEST="${2:-/opt/bin}"
    local TMPDIR; TMPDIR=$(basename "${URL}")

    mkdir -p "${TMPDIR}"
    curl -L "${URL}" | tar -C "${TMPDIR}" -xz
    sudo mkdir -p "${DEST}"
    sudo install "$(find "${TMPDIR}" -type f)" "${DEST}"
    rm "$(find "${TMPDIR}" -type f)"
    rmdir "${TMPDIR}"
}
function install_config {
    local URL="$1"
    local DEST="$2"
    local MODE="$3"
    local CONFIG; CONFIG=$(basename "${URL}")

    sudo mkdir -p "${DEST}"
    curl -sL "${URL}" | sed "s:/usr/bin:/opt/bin:g" | \
                        sudo tee "${DEST}/${CONFIG}" > /dev/null
    sudo chmod "${MODE}" "${DEST}/${CONFIG}"
}
function install_template {
    local TEMPLATES=$*

    sudo mkdir -m 700 -p "$(templates)"
    for TEMPLATE in ${TEMPLATES}; do
        local FILE="${TEMPLATE%%=*}"
        local URL="${TEMPLATE#*=}"
        if [ "${FILE}" = "${URL}" ]; then FILE="$(basename "${URL}")"; fi

        log "Installing ${URL} as ${FILE}..."
        curl -sL "${URL}" | sudo tee "$(templates)/${FILE}" > /dev/null
        sudo chmod 600 "$(templates)/${FILE}"
    done
}

function enable_service {
    local SERVICES="$*"

    for SERVICE in ${SERVICES}; do
        log "Enabling ${SERVICE}..."
        sudo systemctl enable "${SERVICE}"
    done
}

function node_name {
    hostname -s
}

function start_time {
    date +%s
}
function show_completion_time {
    local START_TIME="$1"
    local END_TIME; END_TIME="$(date +%s)"
    log "Complete in $(date -d@$((END_TIME - START_TIME)) -u +%Mm%Ss)."
}
function log {
    echo "$(date -uIseconds | sed s/\+.*//) [$(node_name)]" "$@"
}
function usage {
    >&2 echo "${USAGE}"
    exit 2
}

main "$@"
