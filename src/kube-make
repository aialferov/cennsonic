#!/bin/bash

set -e

KUBE_VERSION="v1.12.6"

Usage=$(cat <<EOF
Usage: kube-make <Action> [Options]

Actions:
    prepare
    download
    install

Options:
    --master=<[User@]PublicIp[/PrivateIp]>
    --worker=<[User@]PublicIp[/PrivateIp]>

Options (prepare):
    --os=<coreos|centos|ubuntu>  # (default: coreos)
    --create-user=<UserName>     # (default: $(whoami))

Options (download):
    --kube-version=<Version>     # (default: ${KUBE_VERSION})

Options (install):
    --init
    --api-ip=<ApiIp>
    --api-iface=<Iface>
    --admin-user=<UserName>      # (default: $(whoami))
    --master-ssh=<[User@]Host>
EOF
)

function main {
    local Action="$1"
    local Masters
    local Workers

    if [ -z "${Action}" ]; then usage; fi

    shift
    local Arg
    for Arg in "$@"; do
        case "${Arg}" in
            --master=*) local Masters="${Masters} ${Arg##*=}";;
            --worker=*) local Workers="${Workers} ${Arg##*=}";;
            --os=*) local Os="${Arg##*=}";;
            --init) local Init=true ;;
            --api-ip=*) local ApiIp="${Arg##*=}";;
            --api-iface=*) local ApiIface="${Arg##*=}";;
            --create-user=*) local CreateUser="${Arg##*=}";;
            --master-ssh=*) local MasterSsh="${Arg##*=}";;
            --admin-user=*) local AdminUser="${Arg##*=}";;
            --kube-version=*) local KubeVersion="${Arg##*=}";;
            *) unknown_option "${Arg}";;
        esac
    done

    Masters="${Masters//,/ }"
    Workers="${Workers//,/ }"
    Os="${Os:-coreos}"
    Init="${Init:-false}"
    CreateUser="${CreateUser:-$(whoami)}"
    AdminUser="${AdminUser:-$(whoami)}"
    KubeVersion="${KubeVersion:-${KUBE_VERSION}}"

    case "${Action}" in
        prepare) make_prepare "${Masters}" "${Workers}" \
                              "${Os}" "${CreateUser}";;

        download) make_download "${Masters}" "${Workers}" "${KubeVersion}";;

        install) make_install "${Masters}" "${Workers}" \
                              "${ApiIp}" "${ApiIface}" \
                              "${Init}" "${MasterSsh}" "${AdminUser}" ;;
        *) usage ;;
    esac

    wait
}

function make_prepare {
    local Masters; read -r -a Masters <<< "$1"
    local Workers; read -r -a Workers <<< "$2"
    local Os="$3"
    local CreateUser="$4"

    case "${Os}" in
        centos|ubuntu) ;;
        *) exit 0 ;;
    esac

    local Node
    for Node in "${Masters[@]}" "${Workers[@]}"; do
        ./src/kube "tools-${Os}" "$(node_ssh "${Node}")" \
                   install "${CreateUser}" &
    done
}

function make_download {
    local Masters; read -r -a Masters <<< "$1"
    local Workers; read -r -a Workers <<< "$2"
    local KubeVersion="$3"

    local Master
    for Master in "${Masters[@]}"; do
        ./src/kube tools "$(node_ssh "${Master}")" \
                   install master "${KubeVersion}" &
    done
    local Worker
    for Worker in "${Workers[@]}"; do
        ./src/kube tools "$(node_ssh "${Worker}")" \
                   install worker "${KubeVersion}" &
    done
}

function make_install {
    local Masters; read -r -a Masters <<< "$1"
    local Workers; read -r -a Workers <<< "$2"
    local ApiIp="$3"
    local ApiIface="$4"
    local Init="$5"
    local MasterSsh="$6"
    local AdminUser="$7"

    if "${Init}"; then
        local Master0Ssh; Master0Ssh="$(node_ssh "${Masters[0]}")"
        local Master0Ip; Master0Ip="$(node_ip "${Masters[0]}")"

        if [ -z "${ApiIp}" ]; then ApiIp="${Master0Ip}"; fi
        if [ -z "${MasterSsh}" ]; then MasterSsh="${Master0Ssh}"; fi

        ./src/kube node "${Master0Ssh}" master init \
                        "${Master0Ip}" "${ApiIp}" "${ApiIface}"

        ./src/kube user "${Master0Ssh}" create "${AdminUser}" -a

        scp "${Master0Ssh}:${AdminUser}.conf" ./
        ssh "${Master0Ssh}" rm \\"${AdminUser}.conf"

        Masters=("${Masters[@]:1}")
    fi

    local Master
    for Master in "${Masters[@]}"; do
        ./src/kube-pki "${MasterSsh}" "$(node_ssh "${Master}")"
        ./src/kube node "$(node_ssh "${Master}")" \
                   master join "$(node_ip "${Master}")" "${ApiIp}"
    done &

    if [ "${#Workers[@]}" -gt 0 ]; then
        local JI; JI=$(./src/kube node "${MasterSsh}" master join-info)
    fi

    local Worker
    for Worker in "${Workers[@]}"; do
        ./src/kube node "$(node_ssh "${Worker}")" \
                   worker join "$(node_ip "${Worker}")" "${ApiIp}" "$JI" &
    done
}

function node_ssh {
    echo "${1%%/*}"
}
function node_ip {
    local Ip="${1##*@}"
    echo "${Ip##*/}"
}

function usage {
    >&2 echo "${Usage}"
    exit 2
}
function unknown_option {
    local Option="$1"
    >&2 echo "Unknown option: ${Option%%=*}"
    exit 2
}

main "$@"
