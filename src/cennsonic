#!/bin/bash

set -e

VERSION="0.2.0"

USAGE=$(cat <<EOF
Usage: cennsonic <Command> [Options]

Command:
    init <Cluster Name>    create initial cluster configuration
    deploy                 deploy a Kubernetes cluster
    scale                  scale a Kubernetes cluster
    ssh-keys               provision SSH keys
    bootstrap              make all the nodes Ansible ready
    disable-sudo-password  disable sudo password on all the nodes
    disable-swap           disable swap on all the nodes
    rook-clean-up          delete all the rook based data from the worker nodes
    help                   print this message
    version                print version

Options:
    --pk,--private-key=<Path>    SSH private key for the nodes access
    -k,--ask-pass                ask for SSH password for the nodes access
    -K,--ask-become-pass         ask for sudo password when needed
    -n,--dry-run                 do not do anything, just show the plan
EOF
)

function main {
    case "$1" in
        init)
            local CLUSTER_NAME="$2"
            if [ -z "${CLUSTER_NAME}" ]; then usage; fi

            init_cluster "${CLUSTER_NAME}"
        ;;
        "$1")
            local ACTION="$1"
            if [ -z "${ACTION}" ]; then usage; fi

            run_action "${ACTION}" "$@"
        ;;
        version) echo "${VERSION}"; exit 0 ;;
        -h|--help|help) echo "${USAGE}"; exit 0 ;;
    esac
}

function init_cluster {
    local CLUSTER_NAME="$1"

    if [ -d "${CLUSTER_NAME}" ]; then
        echo "Directory ${CLUSTER_NAME} already exists."
        exit 1
    fi

    mkdir -p "${CLUSTER_NAME}"
    docker run \
          -e "UID:${UID}" \
          --rm -v "${PWD}/${CLUSTER_NAME}:/${CLUSTER_NAME}" \
          "quay.io/travelping/cennsonic:${VERSION}" sh -c \
               "cp -a /cluster/. /${CLUSTER_NAME} && \
                chown -R ${UID}:${UID} /${CLUSTER_NAME}"

    local CLUSTER_TEMPLATE_NAME="cennsonic.example.net"

    if [ "$(uname)" = "Darwin" ]; then
        find $(grep "${CLUSTER_TEMPLATE_NAME}" -rl "${CLUSTER_NAME}") \
            -exec sed -i "" "s/${CLUSTER_TEMPLATE_NAME}/${CLUSTER_NAME}/g" "{}" \;
    else
        find $(grep "${CLUSTER_TEMPLATE_NAME}" -rl "${CLUSTER_NAME}") \
            -exec sed -i"" "s/${CLUSTER_TEMPLATE_NAME}/${CLUSTER_NAME}/g" "{}" \;
    fi
}

function run_action {
    local ACTION="$1"
    local CONTAINER_PRIVATE_KEY="/root/.ssh/key"
    shift

    for ARG in "$@"; do
        case "${ARG}" in
            --pk) PRIVATE_KEY="${HOME}/.ssh/id_rsa" ;;
            --pk=*|--private-key=*) PRIVATE_KEY="${ARG#*=}"; shift ;;
            -k|--ask-pass) EXTRA_ARGS="${EXTRA_ARGS} --ask-pass" ;;
            -K|--ask-become-pass) EXTRA_ARGS="${EXTRA_ARGS} --ask-become-pass" ;;
            *) echo "Warning: unknown argument ${ARG}" ;;
        esac
    done

    if [ -n "${PRIVATE_KEY}" ]; then
        EXTRA_ARGS="${EXTRA_ARGS} --private-key=${CONTAINER_PRIVATE_KEY}"
        EXTRA_MOUNT="${EXTRA_MOUNT} -v ${PRIVATE_KEY}:${CONTAINER_PRIVATE_KEY}"
    fi

    docker run \
        --rm -it \
        -v "${PWD}/config:/cluster/config" ${EXTRA_MOUNT} \
        "quay.io/travelping/cennsonic:${VERSION}" \
            ansible-playbook "${ACTION}.yml" \
            -vbi /cluster/config/hosts.ini ${EXTRA_ARGS}
}

function check_docker {
    if [ ! "$(docker version 2>/dev/null)" ]; then
        printf %b "Docker is not installed.\\n"\
                  "Please refer "\
                  "https://docs.docker.com/install/#supported-platforms "\
                  "to install for your OS."
        exit 127
    fi
}

function usage {
    >&2 echo "${USAGE}"
    exit 2
}

main "$@"
