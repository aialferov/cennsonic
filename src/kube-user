#!/bin/bash

set -e

USAGE=$(cat <<EOF
Usage: kube-user <Action> <Username> [Options]

Actions
    create
    delete

Options
    -c, --company=<Company>
    -d, --days=<Days>
    -s, --server=<Server>
        --ca-cert=<CA Cert Path>
        --ca-cert-key=<CA Cert Key Path>
EOF
)

function main {
    local START_TIME; START_TIME="$(start_time)"

    case "$1 $2" in
        "create $2")
            local USERNAME="$2"
            if [ -z "${USERNAME}" ]; then usage; fi
            shift 2

            create_user "${USERNAME}" "$@"
            show_completion_time "${START_TIME}"
        ;;
        "delete $2")
            local USERNAME="$2"
            if [ -z "${USERNAME}" ]; then usage; fi

            delete_user "${USERNAME}"
            show_completion_time "${START_TIME}"
        ;;
        *) usage ;;
    esac

    show_completion_time "${START_TIME}"
}

function ca_cert {
    echo "/etc/kubernetes/pki/ca.crt"
}
function ca_cert_key {
    echo "/etc/kubernetes/pki/ca.key"
}
function templates {
    echo "/etc/kubernetes/templates"
}
function kubectl {
    sudo /opt/bin/kubectl --kubeconfig /etc/kubernetes/admin.conf "$@"
}

function create_user {
    local USERNAME="$1"
    shift

    for ARG in "$@"; do
        case "${ARG}" in
            -c=*|--company=*) COMPANY="${ARG#*=}"; shift ;;
            -d=*|--days=*) DAYS="${ARG#*=}"; shift ;;
            -s=*|--server=*) SERVER="${ARG#*=}"; shift ;;
                 --ca-cert=*) CA_CERT="${ARG#*=}"; shift ;;
                 --ca-cert-key=*) CA_CERT_KEY="${ARG#*=}"; shift ;;
            *=*) >&2 echo "Unknown argument: ${ARG%=*}"; exit 2 ;;
            *) >&2 echo "Unknown argument: ${ARG}"; exit 2 ;;
        esac
    done

    log "Creating user ${USERNAME}..."

    COMPANY="${COMPANY:-Kubernetes}"
    DAYS="${DAYS:-365}"
    NAMESPACE="${NAMESPACE:-default}"
    SERVER="${SERVER:-k8s.$(cluster_name)}"
    CA_CERT="${CA_CERT:-$(ca_cert)}"
    CA_CERT_KEY="${CA_CERT_KEY:-$(ca_cert_key)}"

    create_cert_key "${USERNAME}"
    create_cert "${USERNAME}" "${COMPANY}"
    sign_cert "${USERNAME}" "${DAYS}" "${CA_CERT}" "${CA_CERT_KEY}"
    create_kubeconfig "${USERNAME}" "${NAMESPACE}" "${SERVER}" "${CA_CERT}"
    delete_cert "${USERNAME}"
    delete_cert_key "${USERNAME}"
    create_role_binding "${USERNAME}"
}
function delete_user {
    local USERNAME="$1"
    shift

    log "Deleting user ${USERNAME}..."
    delete_role_binding "${USERNAME}"
}

function create_cert_key {
    local USERNAME="$1"
    openssl genrsa -out "${USERNAME}-key.pem" 2048
}
function delete_cert_key {
    local USERNAME="$1"
    rm "${USERNAME}-key.pem" 
}
function create_cert {
    local USERNAME="$1"
    local COMPANY="$2"

    openssl req -new -key "${USERNAME}-key.pem" \
                -out "${USERNAME}.pem" \
                -subj "/CN=${USERNAME}/O=${COMPANY}"
}
function delete_cert {
    local USERNAME="$1"
    rm "${USERNAME}.pem"
}
function sign_cert {
    local USERNAME="$1"
    local DAYS="$2"
    local CA_CERT="$3"
    local CA_CERT_KEY="$4"

    sudo openssl x509 -req -in "${USERNAME}.pem" \
                      -CA "${CA_CERT}" \
                      -CAkey "${CA_CERT_KEY}" \
                      -CAcreateserial \
                      -out "${USERNAME}.pem" \
                      -days "${DAYS}"
}

function create_kubeconfig {
    local USERNAME="$1"
    local NAMESPACE="$2"
    local SERVER="$3"
    local CA_CERT="$4"
    local KUBECONFIG="${USERNAME}.conf"

    /opt/bin/kubectl config set-cluster "$(cluster_name)" \
        --kubeconfig="${KUBECONFIG}" \
        --server="$(server_endpoint "${SERVER}")" \
        --certificate-authority="${CA_CERT}" \
        --embed-certs=true
    
    /opt/bin/kubectl config set-credentials "${USERNAME}-$(cluster_name)" \
        --kubeconfig="${KUBECONFIG}" \
        --client-certificate="${USERNAME}.pem" \
        --client-key="${USERNAME}-key.pem" \
        --embed-certs=true
    
    /opt/bin/kubectl config set-context "${USERNAME}-$(cluster_name)" \
        --kubeconfig="${KUBECONFIG}" \
        --cluster="$(cluster_name)" \
        --user="${USERNAME}-$(cluster_name)" \
        --namespace="${NAMESPACE}"
    
    /opt/bin/kubectl config use-context "${USERNAME}-$(cluster_name)" \
        --kubeconfig="${KUBECONFIG}"
}
function create_role_binding {
    role_binding apply "$@"
}
function delete_role_binding {
    role_binding delete "$@"
}
function role_binding {
    local ACTION="$1"
    local USERNAME="$2"

    sudo sed -e "s/_USERNAME_/${USERNAME}/g" \
             "$(templates)/user-admin-crb.yaml" | \
         kubectl "${ACTION}" --filename -
}

function server_endpoint {
    local SERVER="$1"
    echo "https://${SERVER}:6443"
}

function node_name {
    hostname -s
}
function cluster_name {
    hostname -d
}

function start_time {
    date +%s
}
function show_completion_time {
    local START_TIME="$1"
    local END_TIME; END_TIME="$(date +%s)"
    log "Complete in $(date -d@$((END_TIME - START_TIME)) -u +%Mm%Ss)."
}
function log {
    echo "$(date -uIseconds | sed s/\+.*//) [$(node_name)]" "$@"
}
function usage {
    >&2 echo "${USAGE}"
    exit 2
}

main "$@"
