#!/bin/bash

version=0.2.0

if [ ! "$(docker version 2>/dev/null)" ]; then
    echo "Docker is not installed."
    echo "Please refer https://docs.docker.com/install/#supported-platforms to install for your OS."
    exit 127
fi

container_private_key="/root/.ssh/key"

usage="\
Usage: $(basename $0) <Action> [Options]\n\
\n\
Actions:\n\
    init                   create initial cluster configuration\n\
    deploy                 deploy a Kubernetes cluster\n\
    scale                  scale a Kubernetes cluster\n\
    ssh-keys               provision SSH keys\n\
    disable-sudo           disable sudo on all the nodes\n\
    disable-swap           disable swap on all the nodes\n\
    rook-clean-up          delete all the rook based data from the worker nodes\n\
    etcd-certs-symlinks    create symlinks for etcd cert files (used by Multus)\n\
    help                   print this message
    version                print version
\n\
Options:
    --pk,--private-key=<Path>    SSH private key for the nodes access\n\
    -k,--ask-pass                ask for SSH password for the nodes access\n\
    -K,--ask-become-pass         ask for sudo password when needed\n\
    -n,--dry-run                 do not do anything, just show the plan"

action="$1"; shift

case "$action" in
    init)
        cluster="$1"; shift
        if [ -z "$cluster" ]; then
            echo "Usage: $(basename $0) init <ClusterName> [-n]"
            exit 2
        fi
    ;;
    version) echo "$version"; exit 0 ;;
    -h|--help|help) echo -e "$usage"; exit 0 ;;
esac

for i in "$@"; do
    case $i in
        -n|--dry-run) run=echo ;;
        --pk) private_key="${HOME}/.ssh/id_rsa" ;;
        --pk=*|--private-key=*) private_key="${i#*=}"; shift ;;
        -k|--ask-pass) extra_args="$extra_args --ask-pass" ;;
        -K|--ask-become-pass) extra_args="$extra_args --ask-become-pass" ;;
        *) echo "Warning: invalid argument \"$i\"" ;;
    esac
done

if [ -z "$action" ]; then
    echo -e "$usage"
    exit 2
fi

if [ "$action" = "init" ]; then
    if [ -d "$cluster" ]; then
        echo "Directory \"$cluster\" already exists."
        exit 1
    fi

    $run mkdir -p "$cluster"
    $run docker run \
          -e UID:$UID \
          --rm -v $PWD/$cluster:/$cluster \
          travelping/cennsonic:$version sh -c \
              "cp -a /cluster/. /$cluster && \
               chown -R $UID:$UID /$cluster"

    sample_cluster="cennsonic.example.net"
    if [ -z "$run" ]; then
        if [ "$(uname)" = "Darwin" ]; then
            find $(grep "$sample_cluster" -rl "$cluster") \
                -exec sed -i "" "s/$sample_cluster/$cluster/g" "{}" \;
        else
            find $(grep "$sample_cluster" -rl "$cluster") \
                -exec sed -i"" "s/$sample_cluster/$cluster/g" "{}" \;
        fi
    else
        $run find \$\(grep "$sample_cluster" -rl "$cluster"\) \
            -exec sed -i "" \"s/$sample_cluster/$cluster/g\" \"{}\" \\\;
    fi

    exit 0
fi

if [ -n "$private_key" ]; then
    extra_args="$extra_args --private-key=$container_private_key"
    extra_mount="$extra_mount -v $private_key:$container_private_key"
fi

$run docker run \
    --rm -it \
    -v $PWD/config:/cluster/config $extra_mount \
    travelping/cennsonic:$version \
        ansible-playbook "$action.yml" \
        -vbi /cluster/config/hosts.ini $extra_args
