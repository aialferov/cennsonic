#!/bin/bash

set -e

USAGE=$(cat <<EOF
Usage: kube-node <Command>

Commands:
    master init <Node IP> <API IP> [API Interface]
    master join <Node IP> <API IP> <PKI Archive>
    master delete <Node Name>
    master pki make <PKI Archive>
    master info join
    master reset

    worker join <Node IP> <API IP> <Join Info>
    worker reset

    role set <Node Name> <Role>
    role unset <Node Name> <Role>
EOF
)

function usage {
    >&2 echo "${USAGE}"
    exit 2
}
function log {
    echo "$(date -uIseconds | sed s/\+.*//) [$(node_name)]" "$@"
}

function k8s_version {
    /opt/bin/kubelet --version | sed "s/.* //"
}
function kubeadm {
    sudo /opt/bin/kubeadm --config "$(manifests)/kubeadm.yaml" "$@"
}
function kubeadm_alpha {
    kubeadm alpha phase "$@"
}
function kubectl {
    sudo /opt/bin/kubectl --kubeconfig /etc/kubernetes/admin.conf $*
}

function node_name {
    hostname -s
}
function cluster_name {
    hostname -d
}
function node_hostname {
    hostname -f
}
function api_hostname {
    echo "k8s.$(cluster_name)"
}

function ensure_in_hosts {
    local IP="$1"
    local HOSTNAME="$2"

    log "Ensuring ${IP} ${HOSTNAME} is in /etc/hosts..."
    if grep -q "${HOSTNAME}" /etc/hosts; then
        sudo sed -i "s/.* \\(${HOSTNAME}\\)/${IP}    \\1/" /etc/hosts
    else
        sudo sed -i "$ a ${IP}    ${HOSTNAME}" /etc/hosts
    fi
}
function delete_from_hosts {
    local HOSTNAME="$1"

    log "Deleting ${HOSTNAME} from /etc/hosts..."
    sudo sed -i "/${HOSTNAME}/d" /etc/hosts
}

function resolve_node_to {
    local IP="$1"
    ensure_in_hosts "${IP}" "$(node_hostname)"
}
function resolve_api_to {
    local IP="$1"
    ensure_in_hosts "${IP}" "$(api_hostname)"
}
function resolve_reset {
    delete_from_hosts "$(node_hostname)"
    delete_from_hosts "$(api_hostname)"
}

function master_pki_make {
    local ARCHIVE="$1"

    log "Making PKI archive ${ARCHIVE}..."

    mkdir -p kubernetes/pki/etcd
    sudo cp /etc/kubernetes/pki/{ca.{crt,key},sa.{key,pub}} kubernetes/pki
    sudo cp /etc/kubernetes/pki/front-proxy-ca.{crt,key} kubernetes/pki
    sudo cp /etc/kubernetes/pki/etcd/ca.{crt,key} kubernetes/pki/etcd
    sudo cp /etc/kubernetes/admin.conf kubernetes

    sudo chown -R "${USER}:${USER}" kubernetes
    tar zcf "${ARCHIVE}" kubernetes
    rm -rf kubernetes
}
function master_pki_install {
    local ARCHIVE="$1"

    log "Installing existing PKI from ${ARCHIVE}..."
    sudo tar xf "${ARCHIVE}" -C /etc
    sudo chown -R root:root /etc/kubernetes
    rm "${ARCHIVE}"
}

function manifests {
    echo "/etc/kubernetes/manifests"
}
function templates {
    echo "/etc/kubernetes/templates"
}
function template_to_manifest {
    local FILE="$1"
    local TEMPLATE; TEMPLATE="$(templates)/${FILE}"
    local MANIFEST; MANIFEST="$(manifests)/${FILE}"
    shift

    sudo mkdir -m 700 -p "$(manifests)"
    sudo sed "$@" "${TEMPLATE}" | sudo tee "${MANIFEST}" > /dev/null
    sudo chmod 600 "${MANIFEST}"
}

function pods {
    local POD_NAME="$1"
    local NAMESPACE="${2:+--namespace $2}"
    local SELECTOR="${3:+--selector $3}"
    local JSONPATH="${4:+--output jsonpath=$4}"

    kubectl get pods "${POD_NAME}" "${NAMESPACE}" "${SELECTOR}" "${JSONPATH}"
}

function etcd_cluster {
    JSONPATH=$(printf %b \
        '{range.items[*]}' \
            '{.spec.nodeName}{"=https://"}{.status.podIP}{":2380,"}' \
        '{end}')
    pods "" kube-system component=etcd "${JSONPATH}"
}
function etcd_hostname {
    pods "" kube-system component=etcd "{.items[0].spec.nodeName}"
}
function etcd_hostname_this {
    pods "" kube-system component=etcd \
        "{.items[?(@.spec.nodeName==\"$(node_hostname)\")].spec.nodeName}"
}
function etcd_ip {
    pods "" kube-system component=etcd "{.items[0].status.podIP}"
}
function etcd_ip_this {
    pods "" kube-system component=etcd \
        "{.items[?(@.spec.nodeName==\"$(node_hostname)\")].status.podIP}"
}

function join_token {
    sudo /opt/bin/kubeadm token list | tail -n-1 | sed "s/ .*//"
}
function discovery_token_ca_cert_hash {
    openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | \
        openssl rsa -pubin -outform der 2>/dev/null | \
            openssl dgst -sha256 -hex | sed "s/^.* //"
}

function api_server_command {
    pods "" kube-system component=kube-apiserver \
         "{.items[0].spec.containers[0].command[*]}"
}
function api_server_ip {
    api_server_command | sed "s/.*--advertise-address=\\([0-9|.]\\+\\).*/\\1/"
}
function api_server_port {
    api_server_command | sed "s/.*--secure-port=\\([0-9]\\+\\).*/\\1/"
}

function etcd_ready {
    [ "$(pods "etcd-$(node_hostname)" kube-system "" \
              "{.status.containerStatuses[0].ready}" 2>/dev/null)" = "true" ]
}
function keepalived_ready {
    [ "$(pods "" keepalived-system app=keepalived \
              "{.items[0].status.containerStatuses[0].ready}" \
              2>/dev/null)" = "true" ]
}

function wait_for {
    local CONDITION="$1"

    while ! "${CONDITION}"; do
        echo -en "\\b=>"
        sleep 2
    done
    echo -e "\\b."
}

function install_keepalived {
    local API_IP="$1"
    local API_IFACE="$2"

    log "Installing Keepalived..."
    template_to_manifest keepalived.yaml \
        -e "s/_IP_/${API_IP}/" \
        -e "s/_IFACE_/${API_IFACE}/" \
        -e "s/_PASSWORD_/$(openssl rand -base64 8)/"
    kubectl apply --filename "$(manifests)/keepalived.yaml"

    log "Waiting for Keepalived..."
    wait_for keepalived_ready
}

function node_reset {
    sudo /opt/bin/kubeadm reset --force
    resolve_reset
}

function master_prepare {
    local CLUSTER_STATE="$1"
    local NODE_IP="$2"

    log "Preparing master for the ${CLUSTER_STATE} $(cluster_name)..."

    local ETCD_STATE="${CLUSTER_STATE}"
    [ "${CLUSTER_STATE}" = "existing" ] && ETCD_CLUSTER="$(etcd_cluster)"

    template_to_manifest kubeadm.yaml \
        -e "s/_K8S_VERSION_/$(k8s_version)/g" \
        -e "s/_API_HOSTNAME_/$(api_hostname)/g" \
        -e "s/_NODE_HOSTNAME_/$(node_hostname)/g" \
        -e "s/_NODE_IP_/${NODE_IP}/g" \
        -e "s\\_ETCD_CLUSTER_\\${ETCD_CLUSTER}\\g" \
        -e "s/_ETCD_STATE_/${ETCD_STATE}/g"
}

function master_init {
    local NODE_IP="$1"
    local API_IP="$2"
    local API_IFACE="$3"

    resolve_node_to "${NODE_IP}"
    resolve_api_to "${NODE_IP}"
    master_prepare new "${NODE_IP}"

    log "Initialising first master of $(cluster_name)..."
    kubeadm init

    log "Installing Calico..."
    template_to_manifest calico-rbac-kdd.yaml ""
    template_to_manifest calico.yaml ""
    kubectl apply --filename "$(manifests)/calico-rbac-kdd.yaml"
    kubectl apply --filename "$(manifests)/calico.yaml"

    if [ -n "${API_IFACE}" ]; then
        install_keepalived "${API_IP}" "${API_IFACE}"
    fi
    if [ "${NODE_IP}" != "${API_IP}" ]; then
        resolve_api_to "${API_IP}"
    fi

    log "Waiting for Etcd..."
    wait_for etcd_ready
}

function master_join {
    local NODE_IP="$1"
    local API_IP="$2"
    local PKI_ARCHIVE="$3"

    master_pki_install "${PKI_ARCHIVE}"

    resolve_node_to "${NODE_IP}"
    resolve_api_to "${API_IP}"
    master_prepare existing "${NODE_IP}"

    log "Joining master to $(cluster_name)..."
    kubeadm_alpha certs all
    kubeadm_alpha kubelet config write-to-disk
    kubeadm_alpha kubelet write-env-file
    kubeadm_alpha kubeconfig kubelet
    sudo systemctl start kubelet

    local ETCD_HOSTNAME; ETCD_HOSTNAME="$(etcd_hostname)"
    local ETCD_IP; ETCD_IP="$(etcd_ip)"

    log "Joining Etcd ${ETCD_HOSTNAME} (${ETCD_IP})..."
    kubectl --namespace kube-system \
            exec "etcd-${ETCD_HOSTNAME}" -- \
       etcdctl --ca-file /etc/kubernetes/pki/etcd/ca.crt \
               --key-file /etc/kubernetes/pki/etcd/peer.key \
               --cert-file /etc/kubernetes/pki/etcd/peer.crt \
               --endpoints="https://${ETCD_IP}:2379" \
           member add "$(node_hostname)" "https://${NODE_IP}:2380"

    kubeadm_alpha etcd local
    kubeadm_alpha kubeconfig all
    kubeadm_alpha controlplane all
    kubeadm_alpha kubelet config annotate-cri
    kubeadm_alpha mark-master

    log "Waiting for Etcd..."
    wait_for etcd_ready
}

function master_delete {
    local NODE_NAME="$1"

    log "Deleting master ${NODE_NAME} from $(cluster_name)..."
    kubectl delete node "${NODE_NAME}.$(cluster_name)"

    local ETCD_HOSTNAME; ETCD_HOSTNAME="$(etcd_hostname_this)"
    local ETCD_IP; ETCD_IP="$(etcd_ip_this)"

    log "Retrieving ${NODE_NAME} Etcd ID..."
    local ETCD_ID; ETCD_ID=$(kubectl --namespace kube-system \
            exec "etcd-${ETCD_HOSTNAME}" -- \
        etcdctl --ca-file /etc/kubernetes/pki/etcd/ca.crt \
                --key-file /etc/kubernetes/pki/etcd/peer.key \
                --cert-file /etc/kubernetes/pki/etcd/peer.crt \
                --endpoints="https://${ETCD_IP}:2379" \
            member list | grep "${NODE_NAME}.$(cluster_name)" | sed s/:.*//)

    log "Removing Etcd member ${NODE_NAME} (id: ${ETCD_ID})..."
    kubectl --namespace kube-system \
            exec "etcd-${ETCD_HOSTNAME}" -- \
        etcdctl --ca-file /etc/kubernetes/pki/etcd/ca.crt \
                --key-file /etc/kubernetes/pki/etcd/peer.key \
                --cert-file /etc/kubernetes/pki/etcd/peer.crt \
                --endpoints="https://${ETCD_IP}:2379" \
            member remove "${ETCD_ID}"
}

function master_info_join {
    local HASH; HASH="$(discovery_token_ca_cert_hash)"

    echo -n "--token $(join_token) "
    echo -n "$(api_server_ip):$(api_server_port) "
    echo -n "--discovery-token-ca-cert-hash sha256:${HASH}"
}
function master_reset {
    log "Resetting master of $(cluster_name)..."
    node_reset
}

function worker_join {
    local NODE_IP="$1"
    local API_IP="$2"
    local JOIN_INFO="$3"

    log "Joining worker to $(cluster_name)..."
    resolve_node_to "${NODE_IP}"
    resolve_api_to "${API_IP}"
    sudo /opt/bin/kubeadm join ${JOIN_INFO}
}
function worker_reset {
    log "Resetting worker of $(cluster_name)..."
    node_reset
}

function role_set {
    local NODE_NAME="$1"
    local ROLE="$2"
    local ACTION="${3:-=}"

    local NODE="${NODE_NAME}.$(cluster_name)"
    local NODE_ROLE="node-role.kubernetes.io/${ROLE}"

    kubectl label node "${NODE}" "${NODE_ROLE}${ACTION}"

    if [ "${ROLE}" == "worker" ]; then return; fi

    case "${ACTION}" in
        =) kubectl taint node "${NODE}" "${NODE_ROLE}=:NoSchedule" ;;
        -) kubectl taint node "${NODE}" "${NODE_ROLE}:NoSchedule-" ;;
    esac
}
function role_unset {
    local NODE_NAME="$1"
    local ROLE="$2"
    role_set "${NODE_NAME}" "${ROLE}" -
}

function show_completion_time {
    local START_TIME="$1"
    local DURATION; DURATION="$(($(date +%s) - START_TIME))"
    log "Complete in $(date -d@${DURATION} -u +%Mm%Ss)."
}

START_TIME="$(date +%s)"

case "$1 $2 $3 $4 $5" in
    "master init $3 $4 $5")
        NODE_IP="$3" API_IP="$4" API_IFACE="$5"
        if [ -z "${NODE_IP}" ] || [ -z "${API_IP}" ]; then usage; fi

        master_init "${NODE_IP}" "${API_IP}" "${API_IFACE}"
        show_completion_time "${START_TIME}"
    ;;
    "master join $3 $4 $5")
        NODE_IP="$3" API_IP="$4" PKI_ARCHIVE="$5"
        if [ -z "${NODE_IP}" ] || [ -z "${API_IP}" ] || \
           [ -z "${PKI_ARCHIVE}" ]; then usage; fi

        master_join "${NODE_IP}" "${API_IP}" "${PKI_ARCHIVE}"
        show_completion_time "${START_TIME}"
    ;;
    "master delete $3  ")
        NODE_NAME="$3"
        if [ -z "${NODE_NAME}" ]; then usage; fi

        master_delete "${NODE_NAME}"
        show_completion_time "${START_TIME}"
    ;;
    "master pki make $4 ")
        PKI_ARCHIVE="$4"
        if [ -z "${PKI_ARCHIVE}" ]; then usage; fi

        master_pki_make "${PKI_ARCHIVE}"
        show_completion_time "${START_TIME}"
    ;;
    "master info join  ")
        master_info_join
    ;;
    "master reset   ")
        master_reset
        show_completion_time "${START_TIME}"
    ;;
    "worker join $3 $4 $5")
        NODE_IP="$3" API_IP="$4" JOIN_INFO="$5"
        if [ -z "${NODE_IP}" ] || [ -z "${API_IP}" ] || \
           [ -z "${JOIN_INFO}" ]; then usage; fi

        worker_join "${NODE_IP}" "${API_IP}" "${JOIN_INFO}"
        show_completion_time "${START_TIME}"
    ;;
    "worker reset   ")
        worker_reset
        show_completion_time "${START_TIME}"
    ;;
    "role set $3 $4 ")
        NODE_NAME="$3" ROLE="$4"
        if [ -z "${NODE_NAME}" ] || [ -z "${ROLE}" ]; then usage; fi

        role_set "${NODE_NAME}" "${ROLE}"
    ;;
    "role unset $3 $4 ")
        NODE_NAME="$3" ROLE="$4"
        if [ -z "${NODE_NAME}" ] || [ -z "${ROLE}" ]; then usage; fi

        role_unset "${NODE_NAME}" "${ROLE}"
    ;;
    *) usage ;;
esac
