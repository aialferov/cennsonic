#!/bin/bash

#K8S_VERSION=v1.12.1 # https://github.com/kubernetes/kubernetes/releases
#CNI_VERSION=v0.7.1 # https://github.com/containernetworking/plugins/releases
#CRICTL_VERSION=v1.12.0 # https://github.com/kubernetes-incubator/cri-tools/releases

USAGE=`cat <<EOF
Usage: kube-tools install <Version> [Options]

Options
    --with-cni=<Version>     install CNI plugins of the specified version
    --with-crictl=<Version>  install crictl of the specified version
    --without-kubectl        skip kubectl installation
    --without-master-images  skip pulling master images
    --k8s-tools-url=<URL>    kube{adm,let,ctl} URL to download
    --cni-url=<URL>          CNI plugins URL to download
    --crictl-url=<URL>       crictl URL to download
EOF`

if [ "$1" != "install" ] || [ -z "$2" ]; then
    >&2 echo "$USAGE"
    exit 2
fi

K8S_VERSION="$2"

INSTALL_KUBECTL=true
PULL_MASTER_IMAGES=true

shift 2

for i in "$@"; do
    case $i in
        --with-cni=*) CNI_VERSION="${i#*=}"; shift ;;
        --with-crictl=*) CRICTL_VERSION="${i#*=}"; shift ;;
        --without-kubectl) INSTALL_KUBECTL=false; shift ;;
        --without-master-images) PULL_MASTER_IMAGES=false; shift ;;
        --k8s-tools-url=*) K8S_TOOLS_URL="${i#*=}"; shift ;;
        --cni-url=*) CNI_URL="${i#*=}"; shift ;;
        --crictl-url=*) CRICTL_URL="${i#*=}"; shift ;;
        *) >&2 echo "Unknown argument: $i"; exit 2; shift ;;
    esac
done

K8S_TOOLS_URL="${K8S_TOOLS_URL:-https://storage.googleapis.com/kubernetes-release/release/${K8S_VERSION}/bin/linux/amd64}"
CNI_URL="${CNI_URL:-https://github.com/containernetworking/plugins/releases/download/${CNI_VERSION}}"
CRICTL_URL="${CRICTL_URL:-https://github.com/kubernetes-incubator/cri-tools/releases/download/${CRICTL_VERSION}}"

KUBEADM_CONF_URL="https://raw.githubusercontent.com/kubernetes/kubernetes/${K8S_VERSION}/build/debs/10-kubeadm.conf"
KUBELET_SERVICE_URL="https://raw.githubusercontent.com/kubernetes/kubernetes/${K8S_VERSION}/build/debs/kubelet.service"

echo "Installing kubeadm and kubelet ${K8S_VERSION}..."

sudo mkdir -p /opt/bin
curl -L --remote-name-all $K8S_TOOLS_URL/{kubeadm,kubelet}
sudo install {kubeadm,kubelet} /opt/bin && rm {kubeadm,kubelet}

curl -sSL $KUBEADM_CONF_URL | sed "s:/usr/bin:/opt/bin:g" > 10-kubeadm.conf
sudo mkdir -p /etc/systemd/system/kubelet.service.d
sudo mv 10-kubeadm.conf /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
sudo chown root:root /etc/systemd/system/kubelet.service.d/10-kubeadm.conf

curl -sSL $KUBELET_SERVICE_URL | sed "s:/usr/bin:/opt/bin:g" > kubelet.service
sudo mv kubelet.service /etc/systemd/system/kubelet.service
sudo chown root:root /etc/systemd/system/kubelet.service
sudo chmod 444 /etc/systemd/system/kubelet.service

sudo mkdir -p /etc/cennsonic/manifests
curl -L --remote-name-all https://s3.eu-central-1.amazonaws.com/cennsonic/manifests/{kubeadm.yaml,calico.yaml,calico-rbac-kdd.yaml,keepalived.yaml}
sudo mv {kubeadm.yaml,calico.yaml,calico-rbac-kdd.yaml,keepalived.yaml} /etc/cennsonic/manifests
sudo chown root:root /etc/cennsonic/manifests/*

$INSTALL_KUBECTL && {
    echo
    echo "Installing kubectl ${K8S_VERSION}..."
    curl -LO $K8S_TOOLS_URL/kubectl
    sudo install kubectl /opt/bin && rm kubectl
}

if [ -n "$CNI_VERSION" ]; then
    echo
    echo "Installing CNI plugins ${CNI_VERSION}..."
    sudo mkdir -p /opt/cni/bin
    curl -L $CNI_URL/cni-plugins-amd64-${CNI_VERSION}.tgz | \
        sudo tar -C /opt/cni/bin -xz
fi

if [ -n "$CRICTL_VERSION" ]; then
    echo
    echo "Installing crictl ${CRICTL_VERSION}..."
    curl -L $CRICTL_URL/crictl-${CRICTL_VERSION}-linux-amd64.tar.gz | \
        sudo tar -C /opt/bin -xz
fi

for SERVICE in kubelet docker; do
    echo
    echo "Enabling $SERVICE..."
    sudo systemctl enable $SERVICE
done

$PULL_MASTER_IMAGES && {
    echo
    echo "Pulling master images..."
    /opt/bin/kubeadm config images pull --kubernetes-version $K8S_VERSION
}
