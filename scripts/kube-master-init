#!/bin/bash

set -e

USAGE="Usage: kube-master-init <IP> [LB_IFACE:LB_IP]"

function ensure_in_hosts {
    local IP="$1"
    local HOSTNAME="$2"

    echo "Ensuring $IP $HOSTNAME is in /etc/hosts..."
    grep -q $HOSTNAME /etc/hosts && \
        sudo sed -i "s/.* \($HOSTNAME\)/$IP    \1/" /etc/hosts || \
        sudo sed -i "$ a $IP    $HOSTNAME" /etc/hosts
}

function install_pki {
    local ARCHIVE="$1"

    echo "Installing existing PKI..."
    sudo tar xf "$ARCHIVE" -C /etc
    sudo chown -R root:root /etc/kubernetes
    #rm "$ARCHIVE"
}

function etcd_cluster {
    local KUBECTL="$1"
    JP=`printf %b \
        '{range .items[*]}' \
            '{.spec.nodeName}{"=https://"}{.status.podIP}{":2380,"}' \
        '{end}'`
    sudo $KUBECTL get pods -o jsonpath="$JP"
}

function etcd_hostname {
    local KUBECTL="$1"
    sudo $KUBECTL get pods -o jsonpath='{.items[0].spec.nodeName}'
}

function etcd_ip {
    local KUBECTL="$1"
    sudo $KUBECTL get pods -o jsonpath='{.items[0].status.podIP}'
}

if [ -z "$1" ]; then
    >&2 echo "$USAGE"
    exit 2
fi

IP="$1"

LB_IP="${2#*:}"
LB_IP=${LB_IP:-$IP}
LB_IFACE="${2%:*}"

K8S_VERSION="$(/opt/bin/kubelet --version | sed 's/.* //')"

CLUSTER="$(hostname -d)"

HOSTNAME="$(hostname -f)"
LB_HOSTNAME=k8s.$CLUSTER

KUBECTL="kubectl --kubeconfig /etc/kubernetes/admin.conf"
KUBECTL_ETCD="$KUBECTL --namespace kube-system --selector component=etcd"

ensure_in_hosts $IP $HOSTNAME
ensure_in_hosts $LB_IP $LB_HOSTNAME

if [ ! -f "kube-pki.tgz" ]; then
    ETCD_CLUSTER=""
    ETCD_STATE="new"
else
    install_pki kube-pki.tgz

    ETCD_CLUSTER=$(etcd_cluster $KUBECTL_ETCD)
    ETCD_STATE="existing"
fi

sed -i -e s/__K8S_VERSION__/$K8S_VERSION/g \
       -e s/__LB_HOSTNAME__/$LB_HOSTNAME/g \
       -e s/__LB_IP__/$LB_IP/g \
       -e s/__CLUSTER__/$CLUSTER/g \
       -e s/__HOSTNAME__/$HOSTNAME/g \
       -e s/__IP__/$IP/g \
       -e s\\__ETCD_CLUSTER__\\$ETCD_CLUSTER\\g \
       -e s/__ETCD_STATE__/$ETCD_STATE/g kubeadm-config.yaml

CONFIG="--config kubeadm-config.yaml"
ALPHA_PHASE="kubeadm alpha phase"

if [ "$ETCD_STATE" = "new" ]; then
    ensure_in_hosts $IP $LB_HOSTNAME

    echo "Initialising $CLUSTER on $HOSTNAME ($IP), Kubernetes $K8S_VERSION..."
    sudo kubeadm init $CONFIG

    echo "Installing Calico..."
    sudo $KUBECTL apply -f calico-rbac-kdd.yaml
    sudo $KUBECTL apply -f calico.yaml

    if [ "$IP" != "$LB_IP" ]; then
        echo "Installing Keepalived..."
        sed -i -e s/__LB_IP__/$LB_IP/ \
               -e s/__LB_IFACE__/$LB_IFACE/ \
               -e s/__LB_PASSWORD__/"$(openssl rand -base64 8)"/ keepalived.yaml
        sudo $KUBECTL apply -f keepalived.yaml

        ensure_in_hosts $LB_IP $LB_HOSTNAME
    fi
else
    echo "Joining $HOSTNAME ($IP) to $CLUSTER, Kubernetes $K8S_VERSION..."

    sudo $ALPHA_PHASE certs all $CONFIG
    sudo $ALPHA_PHASE kubelet config write-to-disk $CONFIG
    sudo $ALPHA_PHASE kubelet write-env-file $CONFIG
    sudo $ALPHA_PHASE kubeconfig kubelet $CONFIG
    sudo systemctl start kubelet

    ETCD_HOSTNAME="$(etcd_hostname $KUBECTL_ETCD)"
    ETCD_IP="$(etcd_ip $KUBECTL_ETCD)"

    echo "Joining etcd $ETCD_HOSTNAME ($ETCD_IP)..."
    sudo $KUBECTL --namespace kube-system \
                  exec etcd-${ETCD_HOSTNAME} -- \
             etcdctl --ca-file /etc/kubernetes/pki/etcd/ca.crt \
                     --key-file /etc/kubernetes/pki/etcd/peer.key \
                     --cert-file /etc/kubernetes/pki/etcd/peer.crt \
                     --endpoints=https://${ETCD_IP}:2379 \
                 member add $HOSTNAME https://${IP}:2380

    sudo $ALPHA_PHASE etcd local $CONFIG
    sudo $ALPHA_PHASE kubeconfig all $CONFIG
    sudo $ALPHA_PHASE controlplane all $CONFIG
    sudo $ALPHA_PHASE kubelet config annotate-cri $CONFIG
    sudo $ALPHA_PHASE mark-master $CONFIG
fi
