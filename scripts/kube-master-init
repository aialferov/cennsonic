#!/bin/bash

set -e

USAGE=`cat <<EOF
Usage: kube-master-init <Node IP> [API IP]
EOF`

function usage {
    >&2 echo "$USAGE"
    exit 2
}

function k8s_version {
    /opt/bin/kubelet --version | sed 's/.* //'
}

function node {
    hostname -s
}
function node_hostname {
    hostname -f
}
function cluster_name {
    hostname -d
}
function api_hostname {
    echo "k8s.$(cluster_name)"
}

function ensure_in_hosts {
    local IP="$1"
    local HOSTNAME="$2"

    echo "[$(node)] Ensuring $IP $HOSTNAME is in /etc/hosts..."
    grep -q $HOSTNAME /etc/hosts && \
        sudo sed -i "s/.* \($HOSTNAME\)/$IP    \1/" /etc/hosts || \
        sudo sed -i "$ a $IP    $HOSTNAME" /etc/hosts
}
function delete_from_hosts {
    local HOSTNAME="$1"

    echo "[$(node)] Deleting $IP $HOSTNAME from /etc/hosts..."
    sudo sed -i "/$HOSTNAME/d" /etc/hosts
}
function ensure_hosts {
    ensure_in_hosts "$1" "$(node_hostname)"
    ensure_in_hosts "$2" "$(api_hostname)"
}
function reset_hosts {
    delete_from_hosts "$(node_hostname)"
    delete_from_hosts "$(api_hostname)"
}

function pki_make {
    local ARCHIVE="$1"

    echo "[$(node)] Making PKI archive $ARCHIVE..."
    mkdir -p kubernetes/pki/etcd
    sudo cp /etc/kubernetes/pki/{ca.{crt,key},sa.{key,pub}} kubernetes/pki
    sudo cp /etc/kubernetes/pki/front-proxy-ca.{crt,key} kubernetes/pki
    sudo cp /etc/kubernetes/pki/etcd/ca.{crt,key} kubernetes/pki/etcd
    sudo cp /etc/kubernetes/admin.conf kubernetes

    sudo chown -R $USER:$USER kubernetes
    tar zcf $ARCHIVE kubernetes
    rm -rf kubernetes
}

function pki_install {
    local ARCHIVE="$1"

    echo "[$(node)] Installing existing PKI from $ARCHIVE..."
    sudo tar xf "$ARCHIVE" -C /etc
    sudo chown -R root:root /etc/kubernetes
    rm "$ARCHIVE"
}

function kubeadm {
    sudo /opt/bin/kubeadm --config kubeadm-config.yaml $*
}
function kubeadm_alpha {
    kubeadm alpha phase $*
}

function kubectl {
    sudo kubectl --kubeconfig /etc/kubernetes/admin.conf $*
}
function kubectl_etcd {
    kubectl --namespace kube-system --selector component=etcd $*
}

function etcd_cluster {
    JP=`printf %b \
        '{range.items[*]}' \
            '{.spec.nodeName}{"=https://"}{.status.podIP}{":2380,"}' \
        '{end}'`
    kubectl_etcd get pods --output jsonpath="$JP"
}
function etcd_hostname {
    kubectl_etcd get pods --output jsonpath='{.items[0].spec.nodeName}'
}
function etcd_ip {
    kubectl_etcd get pods --output jsonpath='{.items[0].status.podIP}'
}

function token {
    sudo /opt/bin/kubeadm token list | tail -n-1 | sed 's/ .*//'
}
function discovery_token_ca_cert_hash {
    openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | \
        openssl rsa -pubin -outform der 2>/dev/null | \
            openssl dgst -sha256 -hex | sed 's/^.* //'
}

function api_server_command {
    kubectl get pods \
        --namespace kube-system \
        --selector component=kube-apiserver \
        --output jsonpath='{.items[0].spec.containers[0].command[*]}'
}
function api_server_ip {
    api_server_command | sed 's/.*\--advertise-address=\([0-9|.]\+\).*/\1/'
}
function api_server_port {
    api_server_command | sed 's/.*\--secure-port=\([0-9]\+\).*/\1/'
}

function master_prepare {
    local NODE_IP="$1"
    local PKI_ARCHIVE="$2"

    echo "[$(node)] Preparing master of $(cluster_name)..."

    local ETCD_CLUSTER=""
    local ETCD_STATE="new"

    if [ -f "$PKI_ARCHIVE" ]; then
        pki_install "$PKI_ARCHIVE"

        ETCD_CLUSTER="$(etcd_cluster)"
        ETCD_STATE="existing"
    fi

    sed -i -e s/_K8S_VERSION_/$(k8s_version)/g \
           -e s/_API_HOSTNAME_/$(api_hostname)/g \
           -e s/_NODE_HOSTNAME_/$(node_hostname)/g \
           -e s/_NODE_IP_/$NODE_IP/g \
           -e s\\_ETCD_CLUSTER_\\$ETCD_CLUSTER\\g \
           -e s/_ETCD_STATE_/$ETCD_STATE/g kubeadm-config.yaml
}

function master_init {
    echo "[$(node)] Initialising $(cluster_name)..."
    kubeadm init

    echo "[$(node)] Installing Calico..."
    kubectl apply -f calico-rbac-kdd.yaml
    kubectl apply -f calico.yaml

#   if [ "$NODE_IP" != "$LB_IP" ]; then
#       echo "[$(node)] Installing Keepalived..."
#       sed -i -e s/_LB_IP_/$LB_IP/ \
#              -e s/_LB_IFACE_/$LB_IFACE/ \
#              -e s/_LB_PASSWORD_/"$(openssl rand -base64 8)"/ keepalived.yaml
#       kubectl apply -f keepalived.yaml
#   fi
}

function master_join {
    local NODE_IP="$1"
    local ETCD_HOSTNAME="$(etcd_hostname)"
    local ETCD_IP="$(etcd_ip)"

    echo "[$(node)] Joining $(cluster_name)..."
    kubeadm_alpha certs all
    kubeadm_alpha kubelet config write-to-disk
    kubeadm_alpha kubelet write-env-file
    kubeadm_alpha kubeconfig kubelet
    sudo systemctl start kubelet

    echo "[$(node)] Joining etcd $ETCD_HOSTNAME ($ETCD_IP)..."
    kubectl --namespace kube-system \
            exec etcd-${ETCD_HOSTNAME} -- \
       etcdctl --ca-file /etc/kubernetes/pki/etcd/ca.crt \
               --key-file /etc/kubernetes/pki/etcd/peer.key \
               --cert-file /etc/kubernetes/pki/etcd/peer.crt \
               --endpoints=https://${ETCD_IP}:2379 \
           member add $(node_hostname) https://${NODE_IP}:2380

    kubeadm_alpha etcd local
    kubeadm_alpha kubeconfig all
    kubeadm_alpha controlplane all
    kubeadm_alpha kubelet config annotate-cri
    kubeadm_alpha mark-master
}

function worker_join_command {
    local HASH=$(discovery_token_ca_cert_hash)

    echo -n "sudo kubeadm join"
          echo -n " --token $(token) $(api_server_ip):$(api_server_port)"
          echo -n " --discovery-token-ca-cert-hash sha256:$HASH"
}

function node_reset {
    sudo /opt/bin/kubeadm reset -f
    reset_hosts
}

[ -z "$1" ] && usage

NODE_IP="$1"
API_IP="${2:-$NODE_IP}" # use "$NODE_IP" if "$2" is not set

ensure_hosts "$NODE_IP" "$API_IP"
master_prepare "$NODE_IP" kube-pki.tgz

kubectl config current-context >/dev/null 2>&1 && \
    master_join "$NODE_IP" || \
    master_init
